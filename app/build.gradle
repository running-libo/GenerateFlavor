import automatic.BuildInfo
import automatic.SayHelloTask
import groovy.xml.XmlParser

import java.time.Duration

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.github.generateflavorplugin'
    id 'com.jfrog.bintray' version '1.8.5'
    id 'maven-publish'
}

android {
    namespace 'com.github.gradleplugin'
    compileSdk 33

    defaultConfig {
        applicationId "com.github.gradleplugin"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

//    flavorDimensions 'level'
//    productFlavors {
//        vip1 {
//            dimension 'level'
//        }
//        vip2 {
//            dimension 'level'
//        }
//    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation project(':MyPlugin')

    println "in a closure"
}

task upper {
    String someStr = "mY_naMe"
    println("upper case: " + someStr.toUpperCase())
}

task count {
    4.times {
        print(it + " ")
    }
    println()
}

task hello {
    println 'Hello world!'
}

task fine(dependsOn: hello) {
    println 'I am fine'
}

4.times {
    task "task$it" {
        println("I am task $it" )
    }
}
task0.dependsOn task2, task3

task helloName {
    println("doLast $hello.name task." )
}

task myTask {
    ext.myProperty = "myValue" //自定义任务属性，用ext声明
}

task printTaskProperty {
    println(myTask.myProperty)
}

defaultTasks 'cleanTask', 'runTask'

task cleanTask {
    println "task clean"
}

task runTask {
    "task run"
}

//编写构建脚本

//project属性
task projectParams {
    println "projectParams" + project.name + " " + project.path + " " + project.description
}

//局部变量
def dest = "dest"
task copy {
    println(dest)
}

//扩展属性
ext {
    versionExt = "1.0.2"
    email = "test@gihhub.com"
}

task extParams {
    println versionExt + " -- " + email
}

//list map操作，数据结构的使用使用java的代码
task listMap {
    List<String> list = new ArrayList<>()
    list.add("data1")
    list.add("data2")
    println("listSize: " + list.size())

    Map<String, String> map = [key1: 'value1', key2: 'value2']
    def set = map.entrySet()
    for (Map.Entry<String, String> entry: set) {
        println entry.key + " -- " + entry.value
    }
}

//闭合作为方法的最后一个参数
repositories({
    println "in a closure"
})

//task
//定位 tasks
task location {
    //通过属性获取 tasks
    println(project.hello.name)
    //通过 tasks collection 获取 tasks
    println(tasks['hello'].name)
}

//配置一个任务 - 通过闭包 closure
task myCopy(type: Copy)

myCopy {
    println("myCopy task")
}

// "must run after" 和 "should run after".

task taskX {
    println 'taskX'
}
task taskY {
    println 'taskY'
}
taskX.mustRunAfter taskY
taskX.shouldRunAfter taskY

//给任务加入描述
task description {
    description '这是一个task的description'
    println description
}

//使用判断条件跳过一个任务，使用 onlyIf() 方法来为一个任务加入判断条件. 就和 Java 里的 if 语句一样
hello.onlyIf {
    !project.hasProperty('taskHello')
}

//抛出StopExecutionException异常
task stopException {
//    throw new StopExecutionException()
}

//激活和注销 tasks
task disableMe {
    println 'disableMe'
}
disableMe.enabled = false

//根据一个 XML 文件生成多个输出文件
task transform {
    def srcFile = file('mountains.xml')
    def destDir = new File(buildDir, 'generated')  //buildDir为build编译文件目录，'generated'为generated目录
    doLast {
        println "transforming source file."
        destDir.mkdirs()
        def mountains = new XmlParser().parse(srcFile)
        mountains.children().each {
            def name = it.name()
            def destFile = new File(destDir, "${name}.txt")
            destFile.text = "$it.name()"
        }
    }
}

//通过 gradle.properties 文件设置属性
task printProperties {
    println gradlePropertiesProp  //gradle属性
    println System.properties['system']  //system属性
}

//使用其他的构建脚本配置项目
apply from: 'file.gradle'

task showRepos {
    def repos = repositories.collect {
        it.name
    }
    doLast {
        println "all repos"
        println repos
    }
}

println 'This is executed during the configuration phase.'

tasks.register('testBoth') {
    doFirst {
        println 'This is executed first during the execution phase.'
    }
    doLast {
        println 'This is executed last during the execution phase.'
    }
    println 'This is executed during the configuration phase as well, because :testBoth is used in the build.'
}

class UserInfo {
    String userName
    String age
}

task user {
    def user = configure(new UserInfo()) {
        userName = "hahaha"
        age = 10
    }
    println user.userName + "  " + user.age

    println project.buildDir
    project.setBuildDir('src')
    println project.buildDir
}

tasks.register('myClean', Delete) {
    delete buildDir
}

def buildInfo = tasks.register("buildInfo", BuildInfo) {
    version = project.version
    outputFile = layout.buildDirectory.file("generated-resources/build-info.properties")
}

task stopExcution {
    enabled = false //该task的行为将被跳过
//    throw new StopExecutionException("")

    doLast {
        Thread.sleep(10000)
    }
    timeout = Duration.ofMillis(500) //设置执行超时
}

taskX.configure {
    finalizedBy taskY
}

task printProject {
    println "project的各种属性: "
    println project.rootProject
    println project.projectDir.name + " -- " + project.projectDir.path
    println project.buildDir.path
    println project.name + " -  " + project.description

}

//采用 Project.task(String name) 方法来创建
project.task("myTask3").doLast {
    println "doLast in task3"
}

task first {
    doLast{
        println("task first")
    }
}

task second {
    doLast{
        println("task second")
    }
}

task testDependsOn(dependsOn: [first]) {
    doLast{
        println("task test")
    }
}

//使用自定义task，并通过constructorArgs参数来指定构造函数的参数值
task hello1(type: SayHelloTask, constructorArgs:[30])

task hello2(type: SayHelloTask, constructorArgs:[18]) {
    //使用了哪个task类型，就能直接调用该task类的各个属性和方法
    msg = "lili"
    sayHello()
}

task hello3(type: SayHelloTask, constructorArgs:[18]) {
    destDir = file("$buildDir/outputFile")
}

//增量构建
task test1 {
    //设置inputs
    inputs.property("name", "hjy")
    inputs.property("age", 20)
    //设置outputs
    outputs.file("$buildDir/test.txt")

    doLast {
        println "exec task task1"
    }
}

//在project中添加一个名为groupId的属性
project.ext.groupId = "groupId"
// 使用ext块添加属性
ext {
    artifactId='EasyDependency'
    config=[
            key:'value'
    ]
}

class MyDefaultConfig {
    String applicationId
    String versionCode
    String versionName
    int targetSdkVersion

    @Override
    String toString() {
        return "applicationId = $applicationId , versionCode = $versionCode, versionName = $versionName, targetSdkVersion = $targetSdkVersion"
    }
}

//创建一个名为 foo 的Extension，每个 Extension 实际上与某个类是相关联的
getExtensions().create("myDefaultConfig", MyDefaultConfig)

//配置Extension
myDefaultConfig {
    applicationId = "com.example"
    versionName = "1.0.1"
    versionCode = "1"
    targetSdkVersion 31
}
task testExt {
    //能直接通过 project 获取到自定义的 Extension
    println project.myDefaultConfig
}

//ExtentionContainer
//父类
class Animal {
    String username
    int legs
    Animal(String name) {
        username = name
    }

    void setLegs(int c) {
        legs = c
    }

    String toString() {
        return "This animal is $username, it has ${legs} legs."
    }
}

//子类
class Pig extends Animal {
    int age
    String owner

    Pig(int age, String owner) {
        super("Pig")
        this.age = age
        this.owner = owner
    }

    String toString() {
        return super.toString() + " Its age is $age, its owner is $owner."
    }
}

//创建的Extension是 暴露出来Animal 类型,创建extension名称是name,该extension的类型是Pig，后面2个是参数
def aAnimal = getExtensions().create(Animal, "animal", Pig, 3, "pege")
def aPig = getExtensions().create("pig", Pig, 5, "joge")
animal {
    legs = 4
}
pig {
    setLegs 2
}
task testExt2 {
    println project.getExtensions().findByName("animal")
    println aAnimal
    println aPig
    //验证 aPig 对象是 ExtensionAware 类型的
    println "aPig is a instance of ExtensionAware : ${aPig instanceof ExtensionAware}"
}

//  NamedDomainObjectContainer
//这是领域对象类型定义
class TestDomainObj {
    //必须定义一个 name 属性，并且这个属性值初始化以后不要修改
    String name
    String msg
    //构造函数必须有一个 name 参数
    public TestDomainObj(String name) {
        this.name = name
    }

    void msg(String msg) {
        this.msg = msg
    }

    String toString() {
        return "name = ${name}, msg = ${msg}"
    }
}

//创建一个扩展
class TestExtension {
    //定义一个 NamedDomainObjectContainer 属性
    NamedDomainObjectContainer<TestDomainObj> testDomains

    //在构造函数中创建 NamedDomainObjectContainer
    public TestExtension(org.gradle.api.Project project) {
        //通过 project.container(...) 方法创建 NamedDomainObjectContainer
        testDomains = project.container(TestDomainObj)
    }

    //让其支持 Gradle DSL 语法
    void testDomain(Action<NamedDomainObjectContainer<TestDomainObj>> action) {
        action.execute(testDomains)
    }

    void test() {
        //遍历命名领域对象容器，打印出所有的领域对象值
        testDomains.all {
            println(it)
        }
    }
}

//创建一个名为 test 的 Extension
def testExt = getExtensions().create("testDomain", TestExtension, project)

testDomain {
    testDomain {
        domain1 {
            msg "This is domain1"
        }

        domain2 {
            msg "This is domain2"
        }

        domain3 {
            msg "This is domain3"
        }
    }
}

task nameDomainTask {
    testExt.test()
}

//学习链接：  https://juejin.cn/post/6844903838290296846#comment










































